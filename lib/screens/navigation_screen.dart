import 'package:flutter/material.dart';
import 'package:my_flutter_app_pro/screens/manual_input_view.dart';
import 'package:my_flutter_app_pro/screens/one_day_view.dart';
import 'package:my_flutter_app_pro/screens/period_selection_screen.dart';
import 'package:my_flutter_app_pro/screens/settings_screen.dart';
import 'package:my_flutter_app_pro/screens/tips_screen.dart';
import 'package:my_flutter_app_pro/screens/quotes_screen.dart';
import 'package:my_flutter_app_pro/utils/csv_loader.dart';

import 'package:my_flutter_app_pro/screens/ai_partner_screen.dart';
import 'dart:convert';
import 'dart:io';
import 'package:csv/csv.dart';
import 'package:path_provider/path_provider.dart';
import 'package:my_flutter_app_pro/services/purchase_service.dart';
import 'package:my_flutter_app_pro/widgets/paywall_sheet.dart';

class NavigationScreen extends StatefulWidget {
  final List<List<dynamic>> csvData;

  const NavigationScreen({super.key, required this.csvData});

  @override
  State<NavigationScreen> createState() => _NavigationScreenState();
}
class _NavigationScreenState extends State<NavigationScreen> {
  late List<List<dynamic>> csvData;

  @override
  void initState() {
    super.initState();
    csvData = widget.csvData;
  }

  Widget _buildNavButton({
    required String label,
    required VoidCallback onPressed,
    required Color color,
    required String contextText,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6.0),
      child: InkWell(
        borderRadius: BorderRadius.circular(16),
        onTap: onPressed,
        onLongPress: () {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text('„Åì„ÅÆ„Éú„Çø„É≥„ÅÆË™¨Êòé'),
              content: Text(contextText),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Èñâ„Åò„Çã'),
                ),
              ],
            ),
          );
        },
        child: Container(
          width: double.infinity,
          padding: const EdgeInsets.symmetric(vertical: 14),
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(16),
          ),
          child: Center(
            child: Text(
              label,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
      ),
    );
  }


//------------------------------------------------------------------
  // 1. ÊØéÊó•„ÅÆÂÖ•Âäõ
  //------------------------------------------------------------------

  void _goToManualInputView(BuildContext context) async {
    debugPrint('üîî _goToManualInputView tapped');
    final csvData = await CsvLoader.loadLatestCsvData('HappinessLevelDB1_v2.csv');

    debugPrint('‚úÖ loadLatestCsvData rows=${csvData.length}');

    if (csvData.length <= 1) {
      debugPrint('‚ö†Ô∏è „Éá„Éº„ÇøË°å„ÅåÁÑ°„ÅÑ„Åü„ÇÅÁ©∫„Éá„Éº„Çø„ÅßÈÅ∑Áßª');
      final headers = csvData.isNotEmpty
          ? csvData.first.map((e) => e.toString()).toList()
          : List<String>.from(CsvLoader.header);
      final emptyRow = List<String>.filled(headers.length, "");
      final selectedRow = Map<String, dynamic>.fromIterables(headers, emptyRow);

      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => ManualInputView(
            csvData: [headers, emptyRow],
            selectedRow: selectedRow,
          ),
        ),
      );
      return;
    }

    final headers = csvData.first.map((e) => e.toString()).toList();
    final lastRow = csvData.last.map((e) => e.toString()).toList();
    final selectedRow = Map<String, dynamic>.fromIterables(headers, lastRow);

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ManualInputView(
          csvData: csvData,
          selectedRow: selectedRow,
        ),
      ),
    );
  }

  void _goToOneDayView(BuildContext context) async {
    debugPrint('üîî _goToOneDayView tapped');
    final csvData = await CsvLoader.loadLatestCsvData('HappinessLevelDB1_v2.csv');


    if (csvData.length <= 1) {
      debugPrint('‚ö†Ô∏è „Éá„Éº„ÇøË°å„ÅåÁÑ°„ÅÑ„Åü„ÇÅÁ©∫„Éá„Éº„Çø„ÅßÈÅ∑Áßª');
      final headers = csvData.isNotEmpty
          ? csvData.first.map((e) => e.toString()).toList()
          : List<String>.from(CsvLoader.header);
      final emptyRow = List<String>.filled(headers.length, "");
      final selectedRow = Map<String, String>.fromIterables(headers, emptyRow);

      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => OneDayView(
            csvData: [selectedRow],
            selectedRow: selectedRow,
            selectedDate: DateTime.now(),
          ),
        ),
      );
      return;
    }

    final headers = csvData.first.map((e) => e.toString()).toList();
    final rows = csvData.skip(1).map((row) {
      return Map<String, String>.fromIterables(headers, row.map((e) => e.toString()));
    }).toList();

    rows.sort((a, b) {
      final dateA = DateTime.tryParse(a['Êó•‰ªò']!.replaceAll('"', '').replaceAll('/', '-')) ?? DateTime(1970);
      final dateB = DateTime.tryParse(b['Êó•‰ªò']!.replaceAll('"', '').replaceAll('/', '-')) ?? DateTime(1970);
      return dateB.compareTo(dateA);
    });

    final selectedRow = rows.first;
    final selectedDate = DateTime.tryParse(selectedRow['Êó•‰ªò']!.replaceAll('"', '').replaceAll('/', '-')) ?? DateTime.now();

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => OneDayView(
          csvData: rows,
          selectedRow: selectedRow,
          selectedDate: selectedDate,
        ),
      ),
    );
  }

//------------------------------------------------------------------
  // 3. ÈÄ±„ÉªÊúà„ÉªÂπ¥„Ç∞„É©„Éï
  //------------------------------------------------------------------
  void _goToPeriodSelectionView(BuildContext context) async {
    final csvData = await CsvLoader.loadLatestCsvData('HappinessLevelDB1_v2.csv');

    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => PeriodSelectionScreen(csvData: csvData)),
    );
  }

  //------------------------------------------------------------------
  // 4. Settings
  //------------------------------------------------------------------
  void _goToSettings(BuildContext context) {
    Navigator.push(context, MaterialPageRoute(builder: (_) => const SettingsScreen()));
  }

//------------------------------------------------------------------
  // UI
  //------------------------------------------------------------------

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÁîªÈù¢")),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildNavButton(
                label: "ÊØéÊó•„ÅÆÂÖ•ÂäõÁîªÈù¢„Å∏ üìù",
                onPressed: () => _goToManualInputView(context),
                color: Colors.blue,
                contextText: "„Çπ„Éà„É¨„ÉÉ„ÉÅ/„Ç¶„Ç©„Éº„Ç≠„É≥„Ç∞/Áù°Áú†/Ôºì„Å§„ÅÆÊÑüË¨ù„ÇíË®òÈå≤üìù"
            ),
            _buildNavButton(
                label: "1Êó•„Ç∞„É©„Éï„ÅßË¶ã„Çã üç©",
                onPressed: () => _goToOneDayView(context),
                color: Colors.blue,
                contextText: "Âπ∏„ÅõÊÑü/Áù°Áú†/ÈÅãÂãï/ÊÑüË¨ù„Çí1Êó•Âçò‰Ωç„Åß„Ç∞„É©„ÉïÂåñüìä"
            ),
            _buildNavButton(
                label: "1ÈÄ±„Éª4ÈÄ±„Éª1Âπ¥„Ç∞„É©„Éï„ÅßË¶ã„Çã üìä",
                onPressed: () => _goToPeriodSelectionView(context),
                color: Colors.blue,
                contextText: "1ÈÄ±„Éª4ÈÄ±„Éª1Âπ¥„ÅÆÂÇæÂêë„ÇíÁ¢∫Ë™ç„Åß„Åç„Çãüìä"
            ),
            _buildNavButton(
                label: "Ê∞óÊåÅ„Å°„ÅåÂ∞ë„ÅóÊ•Ω„Å´„Å™„Çã„Éí„É≥„Éà üîç‚ú®",
                onPressed: () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const TipsScreen()),
                ),
                color: Colors.green,
                contextText: "„Éç„Ç¨„ÉÜ„Ç£„Éñ„Å™Ê∞óÊåÅ„Å°„ÅÆÊôÇ„ÄÅË¶ñÁÇπ„ÇíÂ§â„Åà„Å¶„Åø„Çã„Å®üîç‚ú®"
            ),
            _buildNavButton(
                label: "ÂêçË®Ä„Çí„ÉÅ„Çß„ÉÉ„ÇØ üìú‚ú®",
                onPressed: () => Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const QuotesScreen()),
                ),
                color: Colors.green,
                contextText: "„ÇÑ„ÇãÊ∞óÂêë‰∏ä„ÄÅ„Çπ„Éà„É¨„Çπ„Éª‰∏çÂÆâËªΩÊ∏õ„ÅÆ„Éí„É≥„Éà„Å´üîç‚ú®"
            ),

            ElevatedButton.icon(
              onPressed: () async {
                final pro = await PurchaseService.I.isPro();
                if (!pro) {
                  openPaywall(context, mode: PaywallMode.enable);
                  return;
                }
                if (!context.mounted) return;
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => const AIPartnerScreen()),
                );
              },
              onLongPress: () => _showAiInfo(context), // ‚òÖ Èï∑Êäº„Åó„ÅßË™¨Êòé
              label: const Text('üß° AI„Éë„Éº„Éà„Éä„Éº„ÅÆ„Å≤„Å®„Åì„Å®'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.deepPurpleAccent,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              ),
            ),





            _buildNavButton(
                label: "‚öôÔ∏è Ë®≠ÂÆö",
                onPressed: () => _goToSettings(context),
                color: Colors.grey,
                contextText: "ÈÄöÁü•„ÄÅÈáç„ÅøË®≠ÂÆö„Å™„Å©„ÇíÂ§âÊõ¥„ÄÅ‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÁÆ°ÁêÜ„Åå„Åß„Åç„Åæ„Åô‚öôÔ∏è"
            ),
            const SizedBox(height: 20),
            const Center(
              child: Text(
                "‚Äª Èï∑Êäº„Åó„ÅßË™¨Êòé„ÇíË°®Á§∫„Åó„Åæ„Åô",
                style: TextStyle(fontSize: 12, color: Colors.grey),
              ),
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),








      bottomNavigationBar: BottomNavigationBar(
        currentIndex: 1,
        onTap: (index) {
          if (index == 0) {
            Navigator.pop(context); // „Éõ„Éº„É†„Å∏Êàª„Çã
          } else if (index == 2) {
            // „Éä„ÉìÁîªÈù¢„Å™„ÅÆ„Åß‰Ωï„ÇÇ„Åó„Å™„ÅÑ
          } else if (index == 1) {
            Navigator.of(context).pop(); // ÁµÇ‰∫Ü
          }
        },
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: "„Éõ„Éº„É†"),
          BottomNavigationBarItem(icon: Icon(Icons.close, color: Colors.red), label: "ÁµÇ‰∫Ü"),
          BottomNavigationBarItem(icon: Icon(Icons.menu), label: "„Éä„Éì"),
        ],
      ),

    );
  }

  void _showAiInfo(BuildContext context) {
    showDialog<void>(
      context: context,
      builder: (ctx) {
        return AlertDialog(
          title: const Text('AI„Éë„Éº„Éà„Éä„Éº„ÅÆ„Å≤„Å®„Åì„Å®'),
          content: const Text(
              '„ÅÇ„Å™„Åü„ÅÆ„Äå3„Å§„ÅÆÊÑüË¨ù„Äç„ÇÑ„Äå‰ªäÊó•„ÅÆ„Å≤„Å®„Åì„Å®„É°„É¢„Äç„ÄÅÁõ¥Ëøë„ÅÆ„Ç∞„É©„ÉïÊé®Áßª„Çí„ÇÇ„Å®„Å´„ÄÅ'
                  'ÊØéÊó•„ÉªÈÄ±„ÉªÊúà„ÅÆÁü≠„ÅÑ„Ç≥„É°„É≥„Éà„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ'
                  '\n\n„ÉªPro„ÅßÂà©Áî®„Åß„Åç„Åæ„Åô\n„ÉªÊèêÊ°à„ÅØÂèÇËÄÉÊÉÖÂ†±„Åß„Åô\n„ÉªÂåªÁôÇ/Ê≥ïÂæã„Å™„Å©ÈáçË¶Å‰∫ãÈ†Ö„ÅØÂ∞ÇÈñÄÂÆ∂„Å´Á¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(ctx).pop(),
              child: const Text('Èñâ„Åò„Çã'),
            ),
          ],
        );
      },
    );
  }


}
// ===== CSV „É≠„Éº„ÉÄÔºàBOMÂØæÂøú„ÉªUTF8Ôºâ========================================

Future<List<List<dynamic>>> _loadCsvRows() async {
  final dir = await getApplicationDocumentsDirectory();
  final f = File('${dir.path}/HappinessLevelDB1_v2.csv');
  if (!await f.exists()) return const [];

  final raw = await f.readAsBytes();
  // BOMÈô§Âéª„Åó„Å¶„Éá„Ç≥„Éº„Éâ
  const bom = [0xEF, 0xBB, 0xBF];
  List<int> body = raw;
  if (raw.length >= 3 && raw[0] == bom[0] && raw[1] == bom[1] && raw[2] == bom[2]) {
    body = raw.sublist(3);
  }
  final text = utf8.decode(body);

  final rows = const CsvToListConverter(eol: '\n').convert(text);
  // 1Ë°å„ÇÇÁÑ°„Åë„Çå„Å∞Á©∫„ÇíËøî„Åô
  if (rows.isEmpty) return const [];

  // ÂÖàÈ†≠Ë°å„ÅØ„Éò„ÉÉ„ÉÄÊÉ≥ÂÆö„ÄÅ‰ª•Èôç„Éá„Éº„Çø
  return rows;
}


